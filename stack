import json
import smtplib
import sqlite3
import threading
from flask import Flask, request, jsonify, session
from flask_socketio import SocketIO
from flask_cors import CORS
import yfinance as yf

app = Flask(__name__)
app.secret_key = 'your_secret_key'
socketio = SocketIO(app, cors_allowed_origins="*")
CORS(app)

def init_db():
    conn = sqlite3.connect('stocks.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS watchlist (id INTEGER PRIMARY KEY, user_id INTEGER, stock_symbol TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS alerts (id INTEGER PRIMARY KEY, user_id INTEGER, stock_symbol TEXT, price REAL, email TEXT)''')
    conn.commit()
    conn.close()

@app.route('/register', methods=['POST'])
def register():
    data = request.json
    conn = sqlite3.connect('stocks.db')
    c = conn.cursor()
    c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (data['username'], data['password']))
    conn.commit()
    conn.close()
    return jsonify({'message': 'User registered successfully'})

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    conn = sqlite3.connect('stocks.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username=? AND password=?", (data['username'], data['password']))
    user = c.fetchone()
    conn.close()
    if user:
        session['user_id'] = user[0]
        return jsonify({'message': 'Login successful'})
    return jsonify({'message': 'Invalid credentials'}), 401

@app.route('/watchlist', methods=['POST'])
def add_to_watchlist():
    if 'user_id' not in session:
        return jsonify({'message': 'Unauthorized'}), 401
    data = request.json
    conn = sqlite3.connect('stocks.db')
    c = conn.cursor()
    c.execute("INSERT INTO watchlist (user_id, stock_symbol) VALUES (?, ?)", (session['user_id'], data['stock_symbol']))
    conn.commit()
    conn.close()
    return jsonify({'message': 'Stock added to watchlist'})

@app.route('/set-alert', methods=['POST'])
def set_alert():
    if 'user_id' not in session:
        return jsonify({'message': 'Unauthorized'}), 401
    data = request.json
    conn = sqlite3.connect('stocks.db')
    c = conn.cursor()
    c.execute("INSERT INTO alerts (user_id, stock_symbol, price, email) VALUES (?, ?, ?, ?)",
              (session['user_id'], data['stock_symbol'], data['price'], data['email']))
    conn.commit()
    conn.close()
    return jsonify({'message': 'Price alert set'})

def send_email(to_email, stock, price):
    sender_email = "your_email@gmail.com"
    sender_password = "your_email_password"
    subject = f"Stock Alert: {stock}"
    body = f"{stock} has reached your alert price of {price}!"
    message = f"Subject: {subject}\n\n{body}"
    
    with smtplib.SMTP("smtp.gmail.com", 587) as server:
        server.starttls()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, to_email, message)

def stock_price_checker():
    while True:
        conn = sqlite3.connect('stocks.db')
        c = conn.cursor()
        c.execute("SELECT stock_symbol, price, email FROM alerts")
        alerts = c.fetchall()
        conn.close()
        for stock, price, email in alerts:
            current_price = yf.Ticker(stock).history(period='1d')['Close'].iloc[-1]
            if current_price >= price:
                send_email(email, stock, price)
        socketio.sleep(60)

@socketio.on('subscribe')
def handle_subscribe(data):
    stock = data['stock']
    while True:
        price = yf.Ticker(stock).history(period='1d')['Close'].iloc[-1]
        socketio.emit('price_update', {'stock': stock, 'price': price})
        socketio.sleep(10)

if __name__ == '__main__':
    init_db()
    threading.Thread(target=stock_price_checker, daemon=True).start()
    socketio.run(app, debug=True)

